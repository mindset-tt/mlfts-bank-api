{
	"info": {
		"_postman_id": "banking-system-api-collection",
		"name": "Mlfts Bank API API",
		"description": "Complete Postman collection for testing the Banking System API with SQL Server database",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "banking-system"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('userId', response.id);",
									"    pm.test('User registered successfully', function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"} else {",
									"    pm.test('Registration failed', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phoneNumber\": \"+1-555-0123\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1990-01-15\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user in the banking system"
					},
					"response": [
						{
							"name": "Successful Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phoneNumber\": \"+1-555-0123\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1990-01-15\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phoneNumber\": \"+1-555-0123\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"role\": \"CUSTOMER\",\n  \"kycVerified\": false,\n  \"twoFactorEnabled\": false,\n  \"isEnabled\": true,\n  \"createdAt\": \"2025-08-12T15:30:00\"\n}"
						}
					]
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('jwtToken', response.token);",
									"    pm.environment.set('userId', response.userId);",
									"    pm.test('Login successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response.token).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"johndoe\",\n  \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and receive JWT token"
					},
					"response": [
						{
							"name": "Successful Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"johndoe\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb2huZG9lIiwiaWF0IjoxNjkyMTI4NDAwLCJleHAiOjE2OTIyMTQ4MDB9.token_signature\",\n  \"type\": \"Bearer\",\n  \"userId\": 1,\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"role\": \"CUSTOMER\",\n  \"expiresIn\": 86400\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Refresh JWT token"
					}
				},
				{
					"name": "Setup Initial Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('adminToken', response.token);",
									"    pm.environment.set('adminUserId', response.user.id);",
									"    pm.test('Admin setup successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response.user.role).to.eql('ADMIN');",
									"    });",
									"} else {",
									"    pm.test('Admin setup failed', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"email\": \"admin@bankingsystem.com\",\n  \"password\": \"AdminPass123!\",\n  \"firstName\": \"System\",\n  \"lastName\": \"Administrator\",\n  \"phoneNumber\": \"+1-555-0001\",\n  \"address\": \"1 Banking Plaza\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1985-01-01\",\n  \"role\": \"ADMIN\",\n  \"department\": \"Administration\",\n  \"employeeId\": \"ADMIN001\",\n  \"notes\": \"Initial system administrator account\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/setup-admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"setup-admin"
							]
						},
						"description": "Create the first admin user - only works if no admin exists"
					},
					"response": [
						{
							"name": "Admin Setup Successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"email\": \"admin@bankingsystem.com\",\n  \"password\": \"AdminPass123!\",\n  \"firstName\": \"System\",\n  \"lastName\": \"Administrator\",\n  \"phoneNumber\": \"+1-555-0001\",\n  \"address\": \"1 Banking Plaza\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1985-01-01\",\n  \"role\": \"ADMIN\",\n  \"department\": \"Administration\",\n  \"employeeId\": \"ADMIN001\",\n  \"notes\": \"Initial system administrator account\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/setup-admin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"setup-admin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiJ9.admin_token_here.signature\",\n  \"type\": \"Bearer\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"email\": \"admin@bankingsystem.com\",\n    \"firstName\": \"System\",\n    \"lastName\": \"Administrator\",\n    \"role\": \"ADMIN\",\n    \"kycVerified\": true,\n    \"isEnabled\": true,\n    \"createdAt\": \"2025-08-12T15:30:00\"\n  },\n  \"expiresIn\": 86400\n}"
						}
					]
				},
				{
					"name": "Register Admin/Staff User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Admin user registered successfully', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response.user.role).to.be.oneOf(['ADMIN', 'MANAGER', 'TELLER', 'LOAN_OFFICER', 'SECURITY_OFFICER']);",
									"    });",
									"} else {",
									"    pm.test('Admin registration failed', function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"manager001\",\n  \"email\": \"manager@bankingsystem.com\",\n  \"password\": \"ManagerPass123!\",\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Manager\",\n  \"phoneNumber\": \"+1-555-0002\",\n  \"address\": \"2 Banking Plaza\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1988-05-15\",\n  \"role\": \"MANAGER\",\n  \"department\": \"Branch Management\",\n  \"employeeId\": \"MGR001\",\n  \"notes\": \"Branch manager for downtown location\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register-admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register-admin"
							]
						},
						"description": "Register a new admin/staff user (requires admin or manager authentication)"
					},
					"response": [
						{
							"name": "Manager Registration Successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"manager001\",\n  \"email\": \"manager@bankingsystem.com\",\n  \"password\": \"ManagerPass123!\",\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Manager\",\n  \"phoneNumber\": \"+1-555-0002\",\n  \"address\": \"2 Banking Plaza\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\",\n  \"dateOfBirth\": \"1988-05-15\",\n  \"role\": \"MANAGER\",\n  \"department\": \"Branch Management\",\n  \"employeeId\": \"MGR001\",\n  \"notes\": \"Branch manager for downtown location\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register-admin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register-admin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiJ9.manager_token_here.signature\",\n  \"type\": \"Bearer\",\n  \"user\": {\n    \"id\": 2,\n    \"username\": \"manager001\",\n    \"email\": \"manager@bankingsystem.com\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Manager\",\n    \"role\": \"MANAGER\",\n    \"kycVerified\": true,\n    \"isEnabled\": true,\n    \"createdAt\": \"2025-08-12T15:35:00\"\n  },\n  \"expiresIn\": 86400\n}"
						}
					]
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('adminToken', response.token);",
									"    pm.environment.set('adminUserId', response.user.id);",
									"    pm.test('Admin login successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response.token).to.not.be.empty;",
									"        pm.expect(response.user.role).to.be.oneOf(['ADMIN', 'MANAGER', 'TELLER', 'LOAN_OFFICER', 'SECURITY_OFFICER']);",
									"    });",
									"} else {",
									"    pm.test('Admin login failed', function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"AdminPass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with admin credentials to access administrative functions"
					},
					"response": [
						{
							"name": "Admin Login Successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"AdminPass123!\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiJ9.admin_token_here.signature\",\n  \"type\": \"Bearer\",\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"email\": \"admin@bankingsystem.com\",\n    \"firstName\": \"System\",\n    \"lastName\": \"Administrator\",\n    \"role\": \"ADMIN\",\n    \"kycVerified\": true,\n    \"isEnabled\": true\n  },\n  \"expiresIn\": 86400\n}"
						}
					]
				}
			],
			"description": "Authentication endpoints for user registration, login, and token management"
		},
		{
			"name": "Account Management",
			"item": [
				{
					"name": "Create Checking Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('checkingAccountId', response.id);",
									"    pm.environment.set('checkingAccountNumber', response.accountNumber);",
									"    pm.test('Account created successfully', function () {",
									"        pm.response.to.have.status(201);",
									"        pm.expect(response.accountType).to.eql('CHECKING');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountType\": \"CHECKING\",\n  \"initialBalance\": 1000.00,\n  \"overdraftLimit\": 500.00,\n  \"purpose\": \"Primary checking account\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							]
						},
						"description": "Create a new checking account with initial deposit"
					},
					"response": [
						{
							"name": "Account Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountType\": \"CHECKING\",\n  \"initialBalance\": 1000.00,\n  \"overdraftLimit\": 500.00,\n  \"purpose\": \"Primary checking account\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"accountNumber\": \"ACC20250812911574\",\n  \"accountType\": \"CHECKING\",\n  \"balance\": 1000.00,\n  \"availableBalance\": 1000.00,\n  \"minimumBalance\": 100.00,\n  \"isActive\": true,\n  \"isFrozen\": false,\n  \"openedDate\": \"2025-08-12T22:49:58.633\",\n  \"closedDate\": null,\n  \"interestRate\": 0.0050,\n  \"overdraftLimit\": 500.00,\n  \"monthlyMaintenanceFee\": 10.00,\n  \"createdAt\": \"2025-08-12T22:49:58.635\",\n  \"updatedAt\": \"2025-08-12T22:49:58.635\"\n}"
						}
					]
				},
				{
					"name": "Create Savings Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('savingsAccountId', response.id);",
									"    pm.environment.set('savingsAccountNumber', response.accountNumber);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountType\": \"SAVINGS\",\n  \"initialDeposit\": 5000.00,\n  \"minimumBalance\": 500.00,\n  \"interestRate\": 0.0325\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							]
						},
						"description": "Create a savings account with higher interest rate"
					}
				},
				{
					"name": "Get All User Accounts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							]
						},
						"description": "Retrieve all accounts for the authenticated user"
					},
					"response": [
						{
							"name": "User Accounts List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"accountNumber\": \"ACC-2025081200001\",\n    \"accountType\": \"CHECKING\",\n    \"balance\": 2500.00,\n    \"availableBalance\": 2500.00,\n    \"minimumBalance\": 100.00,\n    \"isActive\": true,\n    \"openedDate\": \"2025-08-12T15:35:00\"\n  },\n  {\n    \"id\": 2,\n    \"accountNumber\": \"ACC-2025081200002\",\n    \"accountType\": \"SAVINGS\",\n    \"balance\": 5000.00,\n    \"availableBalance\": 5000.00,\n    \"minimumBalance\": 500.00,\n    \"interestRate\": 0.0325,\n    \"isActive\": true,\n    \"openedDate\": \"2025-08-12T15:40:00\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get Account Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/accounts/{{checkingAccountId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								"{{checkingAccountId}}"
							]
						},
						"description": "Get detailed information for a specific account"
					}
				},
				{
					"name": "Update Account Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"minimumBalance\": 150.00,\n  \"monthlyMaintenanceFee\": 12.00,\n  \"overdraftLimit\": 750.00\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/accounts/{{checkingAccountId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								"{{checkingAccountId}}"
							]
						},
						"description": "Update account settings and limits"
					}
				}
			],
			"description": "Account management operations including creation, retrieval, and updates"
		},
		{
			"name": "Transaction Operations",
			"item": [
				{
					"name": "Deposit Money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('lastTransactionId', response.transactionReference);",
									"    pm.test('Deposit successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response.transactionType).to.eql('DEPOSIT');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountId\": {{checkingAccountId}},\n  \"amount\": 1000.00,\n  \"description\": \"Salary deposit - August 2025\",\n  \"channel\": \"MOBILE_APP\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"deposit"
							]
						},
						"description": "Deposit money into an account"
					},
					"response": [
						{
							"name": "Successful Deposit",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountId\": 1,\n  \"amount\": 1000.00,\n  \"description\": \"Salary deposit - August 2025\",\n  \"channel\": \"MOBILE_APP\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										"deposit"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"transactionReference\": \"TXN-2025081200001\",\n  \"transactionType\": \"DEPOSIT\",\n  \"amount\": 1000.00,\n  \"description\": \"Salary deposit - August 2025\",\n  \"accountId\": 1,\n  \"previousBalance\": 2500.00,\n  \"newBalance\": 3500.00,\n  \"transactionDate\": \"2025-08-12T15:45:00\",\n  \"status\": \"COMPLETED\",\n  \"channel\": \"MOBILE_APP\"\n}"
						}
					]
				},
				{
					"name": "Withdraw Money",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountId\": {{checkingAccountId}},\n  \"amount\": 300.00,\n  \"description\": \"ATM withdrawal - Downtown branch\",\n  \"channel\": \"ATM\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"withdraw"
							]
						},
						"description": "Withdraw money from an account with sufficient balance validation"
					}
				},
				{
					"name": "Transfer Between Accounts",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromAccountId\": {{checkingAccountId}},\n  \"toAccountId\": {{savingsAccountId}},\n  \"amount\": 500.00,\n  \"description\": \"Transfer to savings for emergency fund\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions/transfer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"transfer"
							]
						},
						"description": "Transfer money between user's own accounts"
					}
				},
				{
					"name": "Get Transaction History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions/account/{{checkingAccountId}}?page=0&size=10&sort=transactionDate,desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								"account",
								"{{checkingAccountId}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "transactionDate,desc"
								}
							]
						},
						"description": "Get paginated transaction history for an account"
					}
				}
			],
			"description": "Transaction operations including deposits, withdrawals, transfers, and history"
		},
		{
			"name": "Loan Management",
			"item": [
				{
					"name": "Apply for Personal Loan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('loanId', response.id);",
									"    pm.environment.set('loanNumber', response.loanNumber);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"loanType\": \"PERSONAL\",\n  \"principalAmount\": 15000.00,\n  \"termInMonths\": 36,\n  \"purpose\": \"Home renovation and improvement\",\n  \"annualIncome\": 85000.00,\n  \"creditScore\": 750,\n  \"isSecured\": false,\n  \"disbursementAccountId\": {{checkingAccountId}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/loans/apply",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"loans",
								"apply"
							]
						},
						"description": "Apply for a personal loan with required financial information"
					},
					"response": [
						{
							"name": "Loan Application Submitted",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loanType\": \"PERSONAL\",\n  \"principalAmount\": 15000.00,\n  \"termInMonths\": 36,\n  \"purpose\": \"Home renovation and improvement\",\n  \"annualIncome\": 85000.00,\n  \"creditScore\": 750,\n  \"isSecured\": false,\n  \"disbursementAccountId\": 1\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/loans/apply",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"loans",
										"apply"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"loanNumber\": \"LOAN-2025081200001\",\n  \"loanType\": \"PERSONAL\",\n  \"principalAmount\": 15000.00,\n  \"termInMonths\": 36,\n  \"interestRate\": 0.0899,\n  \"monthlyPayment\": 475.32,\n  \"totalAmount\": 17111.52,\n  \"totalInterest\": 2111.52,\n  \"purpose\": \"Home renovation and improvement\",\n  \"status\": \"APPLIED\",\n  \"applicationDate\": \"2025-08-12T16:00:00\",\n  \"annualIncome\": 85000.00,\n  \"creditScore\": 750,\n  \"isSecured\": false,\n  \"disbursementAccountId\": 1\n}"
						}
					]
				},
				{
					"name": "Get User Loans",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/loans",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"loans"
							]
						},
						"description": "Retrieve all loans for the authenticated user"
					}
				},
				{
					"name": "Make Loan Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 475.32,\n  \"paymentAccountId\": {{checkingAccountId}},\n  \"paymentMethod\": \"BANK_TRANSFER\",\n  \"notes\": \"Regular monthly payment\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/loans/{{loanId}}/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"loans",
								"{{loanId}}",
								"payment"
							]
						},
						"description": "Make a payment towards a loan"
					}
				},
				{
					"name": "Admin - Approve Loan",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notes\": \"Loan approved based on excellent credit score and stable income\",\n  \"interestRate\": 0.0875\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/loans/{{loanId}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"loans",
								"{{loanId}}",
								"approve"
							]
						},
						"description": "Admin endpoint to approve a loan application"
					}
				}
			],
			"description": "Loan management including application, approval workflow, and payments"
		},
		{
			"name": "Card Services",
			"item": [
				{
					"name": "Issue Debit Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('debitCardId', response.id);",
									"    pm.environment.set('debitCardNumber', response.cardNumber);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountId\": {{checkingAccountId}},\n  \"cardType\": \"DEBIT\",\n  \"dailyLimit\": 1500.00,\n  \"monthlyLimit\": 8000.00,\n  \"contactlessEnabled\": true,\n  \"internationalTransactionsEnabled\": true,\n  \"onlineTransactionsEnabled\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/cards/issue",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cards",
								"issue"
							]
						},
						"description": "Issue a new debit card linked to an account"
					},
					"response": [
						{
							"name": "Card Issued Successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accountId\": 1,\n  \"cardType\": \"DEBIT\",\n  \"dailyLimit\": 1500.00,\n  \"monthlyLimit\": 8000.00,\n  \"contactlessEnabled\": true,\n  \"internationalTransactionsEnabled\": true,\n  \"onlineTransactionsEnabled\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/cards/issue",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cards",
										"issue"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"cardNumber\": \"****-****-****-1234\",\n  \"cardType\": \"DEBIT\",\n  \"cardholderName\": \"JOHN DOE\",\n  \"expiryDate\": \"2028-08-01\",\n  \"status\": \"PENDING_ACTIVATION\",\n  \"dailyLimit\": 1500.00,\n  \"monthlyLimit\": 8000.00,\n  \"contactlessEnabled\": true,\n  \"internationalTransactionsEnabled\": true,\n  \"onlineTransactionsEnabled\": true,\n  \"issuedDate\": \"2025-08-12T16:15:00\",\n  \"accountId\": 1\n}"
						}
					]
				},
				{
					"name": "Activate Card",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pin\": \"1234\",\n  \"confirmPin\": \"1234\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/cards/{{debitCardId}}/activate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cards",
								"{{debitCardId}}",
								"activate"
							]
						},
						"description": "Activate a card with PIN setup"
					}
				},
				{
					"name": "Get User Cards",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cards"
							]
						},
						"description": "Get all cards for the authenticated user"
					}
				},
				{
					"name": "Process Card Transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 85.50,\n  \"merchantName\": \"Starbucks Coffee\",\n  \"merchantCategory\": \"FOOD_BEVERAGE\",\n  \"location\": \"Downtown Seattle\",\n  \"transactionType\": \"PURCHASE\",\n  \"isContactless\": true,\n  \"isOnline\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/cards/{{debitCardId}}/transaction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cards",
								"{{debitCardId}}",
								"transaction"
							]
						},
						"description": "Process a card transaction (purchase, withdrawal, etc.)"
					}
				},
				{
					"name": "Block Card",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Lost card - reported by customer\",\n  \"isTemporary\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/cards/{{debitCardId}}/block",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cards",
								"{{debitCardId}}",
								"block"
							]
						},
						"description": "Block a card for security reasons"
					}
				}
			],
			"description": "Card management including issuance, activation, transactions, and security operations"
		},
		{
			"name": "Payment Processing",
			"item": [
				{
					"name": "Internal Transfer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromAccountId\": {{checkingAccountId}},\n  \"toAccountId\": {{savingsAccountId}},\n  \"amount\": 250.00,\n  \"description\": \"Monthly savings transfer\",\n  \"scheduledDate\": \"2025-08-15T10:00:00\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments/internal-transfer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"internal-transfer"
							]
						},
						"description": "Transfer money between internal bank accounts"
					}
				},
				{
					"name": "External Transfer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromAccountId\": {{checkingAccountId}},\n  \"amount\": 750.00,\n  \"externalAccountNumber\": \"9876543210\",\n  \"externalBankCode\": \"WELLSFARGO\",\n  \"beneficiaryName\": \"Jane Smith\",\n  \"description\": \"Rent payment to landlord\",\n  \"fee\": 15.00\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments/external-transfer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"external-transfer"
							]
						},
						"description": "Transfer money to external bank account"
					}
				},
				{
					"name": "Bill Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromAccountId\": {{checkingAccountId}},\n  \"amount\": 185.45,\n  \"billerCode\": \"ELECTRIC001\",\n  \"billerName\": \"Seattle City Light\",\n  \"customerReference\": \"ACC-12345678\",\n  \"fee\": 2.50\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments/bill-payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"bill-payment"
							]
						},
						"description": "Pay utility bills and other services"
					}
				},
				{
					"name": "Get Payment History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/payments/account/{{checkingAccountId}}?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"account",
								"{{checkingAccountId}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Get payment history for an account"
					}
				}
			],
			"description": "Payment processing including internal transfers, external transfers, and bill payments"
		},
		{
			"name": "Notification System",
			"item": [
				{
					"name": "Send Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('notificationId', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Large Transaction Alert\",\n  \"message\": \"A transaction of $1,000.00 was processed on your checking account ending in 1234\",\n  \"type\": \"TRANSACTION_ALERT\",\n  \"priority\": \"HIGH\",\n  \"relatedEntityType\": \"TRANSACTION\",\n  \"relatedEntityId\": \"{{lastTransactionId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "Send a notification to the user"
					}
				},
				{
					"name": "Get User Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications?unreadOnly=false&page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications"
							],
							"query": [
								{
									"key": "unreadOnly",
									"value": "false"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Get all notifications for the authenticated user"
					}
				},
				{
					"name": "Mark Notification as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications/{{notificationId}}/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"{{notificationId}}",
								"read"
							]
						},
						"description": "Mark a specific notification as read"
					}
				},
				{
					"name": "Delete Notification",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications/{{notificationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"{{notificationId}}"
							]
						},
						"description": "Delete a notification"
					}
				}
			],
			"description": "Notification management for user alerts and system messages"
		},
		{
			"name": "Admin Operations",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('adminToken', response.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"AdminPass123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Admin login to access administrative functions"
					}
				},
				{
					"name": "Get All Users (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users?page=0&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						},
						"description": "Admin endpoint to view all users"
					}
				},
				{
					"name": "Get All Transactions (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/transactions?page=0&size=50&sort=transactionDate,desc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"transactions"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "50"
								},
								{
									"key": "sort",
									"value": "transactionDate,desc"
								}
							]
						},
						"description": "Admin endpoint to view all system transactions"
					}
				},
				{
					"name": "Freeze Account (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Suspicious activity detected\",\n  \"temporary\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/accounts/{{checkingAccountId}}/freeze",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"accounts",
								"{{checkingAccountId}}",
								"freeze"
							]
						},
						"description": "Admin endpoint to freeze an account"
					}
				}
			],
			"description": "Administrative operations for system management"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to ensure environment variables are set",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:8080/api/v1');",
					"}",
					"",
					"// Add timestamp for unique usernames in testing",
					"if (!pm.environment.get('timestamp')) {",
					"    pm.environment.set('timestamp', Date.now());",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response format is JSON', function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "checkingAccountId",
			"value": "",
			"type": "string"
		},
		{
			"key": "savingsAccountId",
			"value": "",
			"type": "string"
		},
		{
			"key": "loanId",
			"value": "",
			"type": "string"
		},
		{
			"key": "debitCardId",
			"value": "",
			"type": "string"
		},
		{
			"key": "notificationId",
			"value": "",
			"type": "string"
		}
	]
}
